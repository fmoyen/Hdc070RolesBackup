<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This test runs for now on tul4, but it can be moved to any other system. Cards are auto detected, tests are performed automatically. Problematic, could be that this must not run in parallel but wait for the adjacent test to complete.&#xd;
&#xd;
We need libcxl installed properly to make this work. If we use the original GenWQE version of the card, the genese_card.ko driver must be installed and a proper udev rule should be installed too, to get user-space permission to use the card.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.28.0">
      <projectUrl>https://github.com/ibm-genwqe/genwqe-user/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/ibm-genwqe/genwqe-user</url>
        <credentialsId>fhaverkamp</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>**</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>genwqe-user</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.CleanCheckout/>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.SubmoduleOption>
        <disableSubmodules>false</disableSubmodules>
        <recursiveSubmodules>false</recursiveSubmodules>
        <trackingSubmodules>false</trackingSubmodules>
        <reference></reference>
        <parentCredentials>false</parentCredentials>
      </hudson.plugins.git.extensions.impl.SubmoduleOption>
      <hudson.plugins.git.extensions.impl.PruneStaleBranch/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H H(19-23)/4 * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#
# FIXME Well, well, this must not run in parallel!!
#

#
# Set unique target directory such that parallel builds do not disturb each other.
# Well, we might to clean up those from time to time ...
#
TARGET_DIR=&quot;${JOB_NAME}-${GIT_BRANCH}-${BUILD_NUMBER}&quot;
export TARGET_DIR=`echo $TARGET_DIR | sed -e &apos;s/\//-/g&apos;`
echo &quot;TARGET_DIR=${TARGET_DIR}&quot;

#
# fpgaaccel.git
#   This procedure is not trouble free. The checkout without asking for a
#   password is not fully automatable. This is a problem! Trying to circumvent
#   that with a script using my account, but even with that it asked me one time
#   for a password. I wonder when this is forgotten and it breaks again ...
#

# ~/bin/fpgaaccel_checkout.sh
# cp -r genwqe-user fpgaaccel_genwqe

#
# genwqe-user.git
#
testhost=tyan1

echo &quot;Copy/build the code ...&quot;
ssh fpga@${testhost} dmesg -T
ssh fpga@${testhost} mkdir -p ${TARGET_DIR}
ssh fpga@${testhost} tar xfvz /usr/local/genwqe/genwqe.tar.gz -C ${TARGET_DIR}
rsync -avz --delete genwqe-user fpga@${testhost}:${TARGET_DIR}/genwqe/
wget http://corpus.canterbury.ac.nz/resources/cantrbry.tar.gz
scp cantrbry.tar.gz fpga@${testhost}:${TARGET_DIR}/genwqe/genwqe-user

ssh fpga@${testhost} make -C ${TARGET_DIR}/genwqe DISABLE_LIBCXL=1

echo &quot;Execute standard tests ...&quot;
ssh fpga@${testhost} &lt;&lt; EOF
    cd ${TARGET_DIR}/genwqe/
    for accel in CAPI GENWQE ; do
    	echo &quot;Accelerator: \${accel} ...&quot;
        for card in \`./genwqe-user/tools/genwqe_find_card -A \${accel}\` ; do
            echo &quot;TESTING \${accel} CARD \${card}&quot;
            ./tests/zedc/scripts/zedc_test.sh     -A\$accel -C\$card -Mshort
            if [ $? -ne 0 ]; then
            	echo &quot;ERROR: Problem detected!&quot;
                exit 1
            fi
                        
            ./tests/zlib/scripts/zlib_test_all.sh -A\$accel -C\$card -I -HH
            if [ $? -ne 0 ]; then
            	echo &quot;ERROR: Problem detected!&quot;
                exit 1
            fi
           	
            #./tests/zlib/scripts/zlib_test_all.sh -A\$accel -C\$card -I -HS
            #./tests/zlib/scripts/zlib_test_all.sh -A\$accel -C\$card -I -SH
        done
    done
EOF

echo &quot;Wrap results ...&quot;
ssh fpga@${testhost} &lt;&lt; EOF
	tar cfz ${TARGET_DIR}.tar.gz ${TARGET_DIR}
    echo &quot;.... rm -rf ${TARGET_DIR}&quot;
    rm -rf ${TARGET_DIR}
EOF</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>haver@linux.vnet.ibm.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>true</sendToIndividuals>
    </hudson.tasks.Mailer>
    <org.jenkinsci.plugins.github.status.GitHubCommitStatusSetter plugin="github@1.28.0">
      <commitShaSource class="org.jenkinsci.plugins.github.status.sources.BuildDataRevisionShaSource"/>
      <reposSource class="org.jenkinsci.plugins.github.status.sources.AnyDefinedRepositorySource"/>
      <contextSource class="org.jenkinsci.plugins.github.status.sources.ManuallyEnteredCommitContextSource">
        <context>${PROJECT_NAME} ${GIT_BRANCH}</context>
      </contextSource>
      <statusResultSource class="org.jenkinsci.plugins.github.status.sources.ConditionalStatusResultSource">
        <results>
          <org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
            <state>SUCCESS</state>
            <message>SUCCESS</message>
            <result>SUCCESS</result>
          </org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
          <org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
            <state>FAILURE</state>
            <message>FAILURE</message>
            <result>FAILURE</result>
          </org.jenkinsci.plugins.github.status.sources.misc.BetterThanOrEqualBuildResult>
          <org.jenkinsci.plugins.github.status.sources.misc.AnyBuildResult>
            <state>PENDING</state>
            <message>PENDING</message>
          </org.jenkinsci.plugins.github.status.sources.misc.AnyBuildResult>
        </results>
      </statusResultSource>
      <statusBackrefSource class="org.jenkinsci.plugins.github.status.sources.BuildRefBackrefSource"/>
      <errorHandlers/>
    </org.jenkinsci.plugins.github.status.GitHubCommitStatusSetter>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.3">
      <baseUrl></baseUrl>
      <teamDomain>powercapi</teamDomain>
      <authToken>M0sWYNWoSxiFuBDbYuNaJG5y</authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#gzip_jenkins</room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>true</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.18">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>300</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.7">
      <template>${PROJECT_NAME} ${GIT_BRANCH} #${BUILD_NUMBER}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>