<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This is for Fabrice MOYEN.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>boeBoxes</name>
          <description>Boeblingen systems</description>
          <defaultValue>tul2 tul3</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mopBoxes</name>
          <description>Montpellier systems</description>
          <defaultValue>marennes antipode orpington brahma</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

#######################################
# Initial check

echo -e &quot;Who am I ?: \c&quot;; whoami
id

echo; echo -e &quot;Where ?: \c&quot;; pwd

echo; echo &quot;Homedir:&quot;
cd ~
pwd
fs lq

#echo; echo &quot;.ssh ?:&quot;
#ls -la .ssh

#echo; cat .ssh/id_rsa.pub

#ssh -T -ai ~/.ssh/id_rsa git@github.com

#echo; echo &quot;authorized_keys:&quot;
#cat .ssh/authorized_keys



#######################################
# Jobs investigation &amp; backup

#JobsDir=&quot;/var/lib/jenkins/jobs&quot;
#Job=&quot;SNAP_SIM_matrix&quot;
#Workspace=$PWD

#echo -e &quot;--&gt; User: \c&quot;
#whoami
#echo -e &quot;--&gt; Homedir: \c&quot;
#echo $HOME
#echo -e &quot;--&gt; Workspace: \c&quot;
#echo $Workspace
#echo
#echo &quot;--&gt; jobs directory $JobsDir&quot;
#ls -la $JobsDir
#echo
#cd $JobsDir; find . -name config.xml -exec ls -latr {} +;
#echo
#du -sh $JobsDir

#echo
#echo &quot;--&gt; Job $Job&quot;
#du -sh $JobsDir/$Job

#cd $JobsDir
#tar czf $Workspace/$Job.tar.gz ./$Job
#ls -la $Workspace/$Job.tar.gz
#sshpass -p XXX scp ./$Job.tar.gz fmoyen@10.3.76.10:/home/fmoyen

#######################################
# openVPN investigation

#ps -ef | grep &quot;fpga_&quot; | grep -v grep
#ping -c 1 10.3.76.254
#ping -c 1 10.7.12.50

#######################################
# SSH &amp; AFS investigation

#echo
#echo &quot;## ~/.ssh/config&quot;
#ls -lad ~/.ssh/config
#cat ~/.ssh/config
#echo
#echo &quot;## ~/.ssh/known_hosts&quot;
#ls -lad ~/.ssh/known_hosts
#cat ~/.ssh/known_hosts

# echo
# echo &quot;ssh hostname onto orpington testing:&quot;
# export SSHPASS=XXXXXXXXX
# sshpass -e ssh -o afstokenpassing=no fmoyen@10.3.76.24 hostname

#echo
#echo &quot;## SSH TEST&quot;
#ssh orpington hostname

#RC=0;ssh orpington ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$? # cannot reach orpington
#if [ $RC != &quot;0&quot; ]; then :
#  echo &quot;orpington not reachable, retry VPN connection&quot;
#else
#  echo &quot;ssh orpington OK&quot;
#  ssh orpington &apos;echo &quot;`whoami` on `hostname`&quot;&apos;
#fi

#######################################
# SSH &amp; AFS investigation

#TESTBOXES=( ${boeBoxes[*]} ${mopBoxes[*]}) # init array of systems
#echo &quot;------------------------------------&quot;
#echo &quot;~/.ssh/config&quot;
#echo
#cat ~/.ssh/config
#echo &quot;------------------------------------&quot;

#RC=0;ssh dim1 ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 ||RC=$?
#if [ $RC == &quot;0&quot; ]; then echo &quot;dim1 ping ok&quot;; else echo &quot;dim1 not reachable&quot;;exit 1;fi
      
#for box in &quot;${TESTBOXES[@]}&quot;;do
      
# if [[ ${mopBoxes[*]} =~ $box ]]
# then
#   # $box is a Montpellier server
#   RC=0;ssh $box ping localhost -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
# else
#   # $box is a Boeblingen server, accessible through dim1 system
#   RC=0;ssh dim1 ping $box -c1 &gt;/dev/null 2&gt;&amp;1 || RC=$?
# fi
#     
# if [ $RC == &quot;0&quot; ]; then echo &quot;$box ping ok&quot;; else echo &quot;$box not reachable&quot;;continue;fi
#done

#################################
# du -sh 
# echo
# cd /var/lib/jenkins
# pwd
# echo; echo &quot;du -sh &quot;
# du -sh .
# echo
# du -sh *
# echo; echo &quot;du -sk | sort -n&quot;
# du -sk * | sort -n
# echo;echo &quot;df -h &quot;
# df -h /var/lib/jenkins


# echo; echo &quot;lsof&quot;
# lsof | grep &apos;(deleted)&apos;


#####################################
# Getting back b_route_design.dcp CAPI1 files

#ToServer=marennes
#cards=&quot;ADKU3 AD8K5 N250S S121B&quot;

#ssh $ToServer &quot;mkdir -p fabrice&quot;

#for i in $cards;do
#  ls -la /afs/bb/proj/fpga/framework/cards/$i/current/b_route_design.dcp
#  ssh $ToServer &quot;mkdir fabrice/$i&quot;
#  scp /afs/bb/proj/fpga/framework/cards/$i/current/b_route_design.dcp $ToServer:./fabrice/$i
#  done

##########################################
# Investigating AFS configuration

echo
echo &quot;################################################&quot;
echo

echo &quot;Xilinx root:&quot;
DIR=/afs/bb/proj/fpga/xilinx
echo $DIR
cd $DIR
echo;echo &quot;fs listacl:&quot;
fs listacl $DIR
echo;echo &quot;fs lq:&quot;
fs lq $DIR
echo;echo &quot;ls -la:&quot;
ls -la $DIR
echo;echo &quot;ls -la Vivado:&quot;
ls -la $DIR/Vivado

echo
echo &quot;################################################&quot;
echo

echo &quot;workspaces root:&quot;
DIR=/afs/bb/proj/fpga/framework/CI_ws
echo $DIR
cd $DIR
echo;echo &quot;fs listacl:&quot;
fs listacl $DIR
fs listacl $DIR/*
echo;echo &quot;fs lq:&quot;
fs lq $DIR
echo; echo &quot;ls -la:&quot;
ls -la $DIR
echo;echo &quot;fs lq &amp;&amp; ls -la vol\*:&quot;
fs lq $DIR/vol*
ls -la $DIR/vol*
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>