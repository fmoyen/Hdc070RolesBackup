<?xml version='1.0' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.11">
  <actions/>
  <description>builds and simulates many different configurations</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.28.0">
      <projectUrl>https://github.com/open-power/snap/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>1</maxConcurrentPerNode>
      <maxConcurrentTotal>6</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList">
        <string>THROTTLE_SIM</string>
      </categories>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>category</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>false</throttleMatrixBuilds>
        <throttleMatrixConfigurations>true</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/open-power/snap</url>
        <credentialsId>e6c34cbf-e090-43c1-bf9b-3e2effdb2c16</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>test_matrix</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>snap</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.PruneStaleBranch/>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.28.0">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H H/2 * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <customWorkspace>/afs/bb/proj/fpga/framework/CI_ws/SNAP_test_matrix</customWorkspace>
  <axes>
    <hudson.matrix.TextAxis>
      <name>ACT</name>
      <values>
        <string>hdl_example.SDRAM</string>
        <string>hdl_example.BRAM</string>
        <string>hdl_example.NORAM</string>
        <string>hdl_example.SDRAM.NVME</string>
        <string>hdl_nvme_example.BRAM.NVME</string>
        <string>hls_nvme_memcopy</string>
        <string>hls_memcopy</string>
        <string>hls_bfs</string>
        <string>hls_intersect_s</string>
        <string>hls_intersect_h</string>
        <string>hls_hashjoin</string>
        <string>hls_search</string>
        <string>hls_sponge</string>
        <string>hls_blowfish</string>
        <string>hls_helloworld</string>
        <string>test</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>CRD</name>
      <values>
        <string>ADKU3</string>
        <string>N250S</string>
        <string>S121B</string>
        <string>N250SP</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>SIM</name>
      <values>
        <string>default</string>
      </values>
    </hudson.matrix.TextAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>set +x
#!/bin/bash
echo &quot;***********************************************************&quot;
NAME=$(echo $GIT_BRANCH| cut -d&apos;/&apos; -f 2 |tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;) # remove origin/ from branch and translate to lowercase
PREFIX=$(echo $NAME| cut -d&apos;_&apos; -f 1)    # chars up to first &apos;_&apos; identify need for test
echo &quot;name=$NAME prefix=$PREFIX&quot;

#if [ &quot;$NAME&quot; == &quot;master&quot; ] ||
#   [ &quot;$PREFIX&quot; == &quot;rc&quot;   ] ||
#   [ $ACT =~ $PREFIX     ] ||
#   [ $CRD =~ $PREFIX     ];then BSKIP=0;else BSKIP=1;fi
#echo &quot;branch=$GIT_BRANCH tag prefix=$PREFIX SKIP=$BSKIP&quot;
BSKIP=0

ASKIP=1
case &quot;$CRD:$ACT:$SIM&quot; in
  *:*NVME*:XSIM )          ASKIP=1;;
  N250S:*NVME*:* )         ASKIP=0;;
  N250SP:*:* )             ASKIP=1;;
  N250SP:hdl_example*:* )  ASKIP=0;;
  *:hdl_example*:* )       ASKIP=0;;
  *:hls_memcopy:* )        ASKIP=0;;
  *:hls_bfs:* )            ASKIP=0;;
  *:hls_hashjoin:* )       ASKIP=0;;
  *:hls_intersect_h:* )    ASKIP=0;;
  *:hls_intersect_s:* )    ASKIP=0;;
  *:hls_search:* )         ASKIP=0;;
  *:hls_sponge:* )         ASKIP=0;;
  *:hls_blowfish:* )       ASKIP=1;;
  *:hls_helloworld:* )     ASKIP=1;;
  *:test:* )               ASKIP=0;;
  * )                      ASKIP=0;;
esac            
echo &quot;card=$CRD action=$ACT SKIP=$ASKIP&quot;

echo &quot;check existance of defconfig&quot;
DSKIP=1
case &quot;$ACT&quot; in
  test ) DSKIP=0;;
  *&quot;hls_intersect&quot;* ) 
    if [ -f snap/defconfig/$CRD.hls_intersect.defconfig ];then DSKIP=0;fi;;
  * )          
    if [ -f snap/defconfig/$CRD.$ACT.defconfig ];then DSKIP=0
    else 
      echo &quot;$CRD.$ACT.defconfig does not exist&quot;
      ls snap/defconfig/
    fi;;  
esac
echo &quot;defconfig SKIP=$DSKIP&quot;

if [ &quot;$ASKIP&quot; == &quot;1&quot; ] || [ &quot;$DSKIP&quot; == &quot;1&quot; ] || [ &quot;$BSKIP&quot; == &quot;1&quot; ];then SKIP=1;else SKIP=0;fi
echo &quot;SKIP=$SKIP&quot; &gt;export_props.properties
echo &quot;properties passed to next shell:&quot;
cat export_props.properties
echo &quot;***********************************************************&quot;</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.3">
      <info>
        <propertiesFilePath>export_props.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
        <token>$SKIP</token>
      </condition>
      <buildStep class="org.jenkins_ci.plugins.fail_the_build.FixResultBuilder" plugin="fail-the-build-plugin@1.0">
        <defaultResultName>ABORTED</defaultResultName>
        <success></success>
        <unstable></unstable>
        <failure></failure>
        <aborted></aborted>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command># set +x
ulimit -c unlimited
# python3 needs this path setup
export PATH=$PATH:/usr/local/bin
#echo &quot;unstable exit for testing&quot;;exit 100

echo &quot;**************setup LSF************************************&quot;
ulimit -c unlimited
export PATH=$PATH:/usr/local/bin:/home/lsfbb/prod/9.1/linux2.6-glibc2.3-x86_64/bin
export LSF_SERVERDIR=/home/lsfbb/prod/9.1/linux2.6-glibc2.3-x86_64/etc
export LSF_LIBDIR=/home/lsfbb/prod/9.1/linux2.6-glibc2.3-x86_64/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/lsfbb/prod/9.1/linux2.6-glibc2.3-x86_64/lib
export LSF_BINDIR=/home/lsfbb/prod/9.1/linux2.6-glibc2.3-x86_64/bin
export LSF_SUBMITTER_OSTYPE=Linux
export LSF_ENVDIR=/home/lsfbb/prod/conf
LSF=&quot;-P zsort&quot;
LSF+=&quot; -M 20&quot;                     # 20GB memory
LSF+=&quot; -C 2000&quot;                   # 2MB core file
LSF+=&apos; -R type=X86_64 -R span[hosts=1]&apos;
LSF+=&quot; -I -n 4 &quot;

echo &quot;************* Get and build Simulation Software ...&quot;
export FRAMEWORK_ROOT=/afs/bb/proj/fpga/framework
export SIMULATOR=$SIM
export USERHOME=`pwd`
export SNAP_ROOT=$USERHOME/snap

rm -rf pslse
case $CRD in 
  &apos;N250SP&apos;)     . ${FRAMEWORK_ROOT}/ibm_settings_for_snap 2017.3 15.20 37 
                git clone -b capi2 https://github.com/ibm-capi/pslse pslse
                ;;
  *)            . ${FRAMEWORK_ROOT}/ibm_settings_for_snap 2016.4 37
                git clone -b master https://github.com/ibm-capi/pslse pslse
                ;;
esac
make -C pslse/libcxl

cd ${SNAP_ROOT}
echo &quot;************* Build Simulation Model ...&quot;
echo &quot;export PSLSE_ROOT=$USERHOME/pslse&quot; &gt;snap_env.sh
echo &quot;export PSL_DCP=/afs/bb/proj/fpga/framework/cards/$CRD/current/b_route_design.dcp&quot; &gt;&gt;snap_env.sh
echo &quot;#setup: XILINX_LOCAL_USER_DATA=${XILINX_LOCAL_USER_DATA}, overwrite=no to prevent write access error in XilincTclStore (tclapp:load_apps)&quot; &gt;&gt;snap_env.sh
echo &quot;export XILINX_LOCAL_USER_DATA=no&quot; &gt;&gt; snap_env.sh

case $ACT in          # select config based on XSIM(not all defconfig avail yet) &amp; compile action
  &apos;test&apos;)             echo &quot;test exit 0&quot;;exit 0;; # just exit 
  &apos;hls_intersect_h&apos;)  make $CRD.hls_intersect.defconfig
                      source ./snap_env.sh        # execute to exploit ACTION_ROOT
                      echo &quot;select action intersect hash&quot;;
#                     make -C ${PSLSE_ROOT}/libcxl; 
                      make -C ${ACTION_ROOT} clean config_h
                      ;;
  &apos;hls_intersect_s&apos;)  make $CRD.hls_intersect.defconfig
                      source ./snap_env.sh        # execute to exploit ACTION_ROOT
                      echo &quot;select action intersect sort&quot;;
#                     make -C ${PSLSE_ROOT}/libcxl; 
                      make -C ${ACTION_ROOT} clean config_s
                      ;;
  *&quot;nvme&quot;*|*&quot;NVME&quot;*)  echo &quot;export DENALI=/afs/bb/proj/cte/tools/cds/VIPCAT/11.30.037/tools.lnx86/denali_64bit&quot; &gt;&gt;snap_env.sh
                      echo &quot;export CDS_LIC_FILE=5280@auslnxlic01.austin.ibm.com&quot;                                &gt;&gt;snap_env.sh
                      make $CRD.$ACT.defconfig;;
  *)                  make $CRD.$ACT.defconfig;;
esac

case $SIM in
  &apos;xsim&apos;|&apos;XSIM&apos; )     echo &quot;export SIMULATOR=xsim&quot; &gt;&gt; .snap_config.sh;;   # overwrite simulator
  &apos;irun&apos;|&apos;IRUN&apos; )     echo &quot;export SIMULATOR=irun&quot; &gt;&gt; .snap_config.sh;;
  * ) echo &quot;use default simulator&quot;
esac
echo &quot;printout env&amp;config&quot;;cat snap_env.sh .snap_config.sh
# echo &quot;debug exit&quot;;exit 1

# execute with LSF, SNAP_ROOT must reside in AFS
bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}_config&quot; &quot;make model&quot;
# execute locally
# make model

echo &quot;************* Run Simulation ...&quot;
cd ${SNAP_ROOT}/hardware/sim
##### enable SW trace
# export SNAP_TRACE=0xf
##### execute locally
# ./run_sim -list testlist.sh -noaet
##### execute on AFS with LSF, report error as unstable build
case $SIM in
  &apos;xsim&apos;|&apos;XSIM&apos; ) bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}&quot; &quot;./run_sim -list testlist.sh -noaet&quot;||exit 100
  ;;
  &apos;irun&apos;|&apos;IRUN&apos; ) bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}&quot; &quot;./run_sim -irun -list testlist.sh -noaet&quot;||exit 100
  ;;
  *)              bsub $LSF -J &quot;${CRD}_${ACT}_${SIM}&quot; &quot;./run_sim -list testlist.sh -noaet&quot;||exit 100
  ;;
esac</command>
      <unstableReturn>100</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>false</cleanWhenNotBuilt>
      <cleanWhenAborted>false</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.18">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>300</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.7">
      <template>#${BUILD_NUMBER}}-${GIT_BRANCH}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
    <touchStoneCombinationFilter>ACT==&quot;test&quot; &amp;&amp; CRD==&quot;ADKU3&quot;</touchStoneCombinationFilter>
    <touchStoneResultCondition>
      <name>SUCCESS</name>
      <ordinal>0</ordinal>
      <color>BLUE</color>
      <completeBuild>true</completeBuild>
    </touchStoneResultCondition>
  </executionStrategy>
  <childCustomWorkspace>${COMBINATION}</childCustomWorkspace>
</matrix-project>